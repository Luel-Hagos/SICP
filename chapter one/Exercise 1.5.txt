Exercise 1.5: Ben Bitdiddle has invented a test to determine
whether the interpreter he is faced with is using applicativeorder evaluation or normal-order evaluation. He defines the
following two procedures:

(define (p) (p))
(define (test x y)
(if (= x 0) 0 y))
ÓÅâen he evaluates the expression
(test 0 (p))

What behavior will Ben observe with an interpreter that
uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? 
Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter 
is using normal or applicative order: the predicate expression is evaluated first, 
and the result determines whether to evaluate the consequent or the alternative expression.)

Solution
------------------------
first let us what does normal-order evaluation and applicative-order evaluation mean.
* normal-order evaluation:- It is fully expand and then reduce.
* applicative-order evaluation:- evaluate the arguments and then apply.

Therefore for the above if we use normal-order evaluation we will get an out put of 0, but if we use applicative-order evaluation 
it will run infinitly since we don't know the value of (p).